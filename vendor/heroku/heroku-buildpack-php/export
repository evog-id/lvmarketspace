
export PATH="/app/.heroku/php/bin:/app/.heroku/php/sbin:$PATH"


export PATH="/app/.heroku/php/bin:/app/.heroku/php/sbin:$PATH"


mlib="/sys/fs/cgroup/memory/memory.limit_in_bytes"
if [[ -f "$mlib" ]]; then
export COMPOSER_MEMORY_LIMIT=${COMPOSER_MEMORY_LIMIT:-$(cat "$mlib")}
fi
export COMPOSER_MIRROR_PATH_REPOS=${COMPOSER_MIRROR_PATH_REPOS:-1}
export COMPOSER_NO_INTERACTION=${COMPOSER_NO_INTERACTION:-1}
export PATH="/app/.heroku/php/bin:$PATH"
# now composer is on the path
# the export script is called with /app as the cwd, but the app source with composer.json is in another location
# we need to cd to the dirname of realpath 'composer' first to find the actual location of the app during the build:
# - we know 'composer' is on $PATH in /app/.heroku/php/bin
# - we know /app/.heroku/php is a symlink to the build dir
# - we $(dirname $(realpath 'composer')) to get $build_dir/.heroku/php/bin/
# - then we cd up three times (from .heroku/php/bin, from .heroku/php, from .heroku) so we're in the build dir
# - then we invoke 'composer config bin-dir' in there and realpath that so it's absolute
# no scan dir so no newrelic starts up and outputs messages etc
# we need to use --canonicalize-missing, otherwise we'd have to mkdir -p the bin-dir (it's not there yet when we source export early on in bin/compile)
export PATH="$PATH:$(cd "$(dirname "$(realpath "$(which composer)")")"; cd ../../..; bin_dir="$(PHP_INI_SCAN_DIR= COMPOSER_AUTH= composer config --no-plugins bin-dir)"; realpath --canonicalize-missing "$bin_dir")"


export PATH="/app/.heroku/php/sbin:$PATH"

export PHP_INI_SCAN_DIR=${PHP_INI_SCAN_DIR-}:/tmp/tmp.foXBJ2fJzF/target/conf/php/apm-nostart-overrides/
